import "./chunk-G3PMV62Z.js";

// node_modules/toastify/dist/build.js
function __extends(d, b) {
  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var BaseLevel = function() {
  function BaseLevel2() {
  }
  BaseLevel2.prototype.buildNotification = function(options, type, title, body) {
    if (body === void 0) {
      body = null;
    }
    var notification = document.createElement("div");
    notification.classList.add("toastify");
    notification.classList.add("toastify-" + options.position);
    notification.classList.add("toastify-" + type);
    var notificationContent = document.createElement("div");
    notificationContent.classList.add("toastify-content");
    var titleArea = document.createElement("span");
    titleArea.classList.add("toastify-title");
    titleArea.innerHTML = title;
    var bodyArea = document.createElement("span");
    bodyArea.classList.add("toastify-content");
    bodyArea.innerHTML = body;
    var cancelIcon = document.createElement("span");
    cancelIcon.classList.add("toastify-cancel-icon");
    cancelIcon.innerHTML = "&#x2716;";
    notificationContent.appendChild(titleArea);
    if (body) {
      notificationContent.appendChild(bodyArea);
    }
    notificationContent.appendChild(cancelIcon);
    notification.appendChild(notificationContent);
    return notification;
  };
  BaseLevel2.prototype.showNotification = function(notification, options) {
    var _this = this;
    var target = this.getTarget(options);
    target.appendChild(notification);
    this.fadeIn(notification, options.speed).then(function() {
      _this.setUpEventListener(notification, options);
      setTimeout(function() {
        _this.hideNotification(notification, options);
      }, options.delay);
    });
  };
  BaseLevel2.prototype.hideNotification = function(notification, options) {
    this.fadeOut(notification, options.speed).then(function() {
      notification.parentNode.removeChild(notification);
    });
  };
  BaseLevel2.prototype.setUpEventListener = function(notification, options) {
    var element = notification.lastElementChild;
    element.addEventListener("click", (function closeIconClicked(event) {
      event.preventDefault();
      element.removeEventListener("click", closeIconClicked, false);
      this.hideNotification(notification, options);
    }).bind(this));
  };
  BaseLevel2.prototype.fadeOut = function(element, speed) {
    return new Promise(function(resolve, reject) {
      var opacity = 1;
      var timer = setInterval(function() {
        if (opacity <= 0.1) {
          clearInterval(timer);
          element.style.display = "none";
          resolve();
        }
        element.style.opacity = opacity.toString();
        element.style.filter = "alpha(opacity=" + opacity * 100 + ")";
        opacity -= opacity * 0.1;
      }, speed);
    });
  };
  BaseLevel2.prototype.fadeIn = function(element, speed) {
    return new Promise(function(resolve, reject) {
      var opacity = 0;
      var timer = setInterval(function() {
        if (opacity > 1) {
          clearInterval(timer);
          resolve();
        }
        element.style.opacity = opacity.toString();
        element.style.filter = "alpha(opacity=" + opacity * 100 + ")";
        if (opacity === 0) {
          opacity = 0.1;
          return;
        }
        opacity += opacity * 0.1;
      }, speed);
    });
  };
  BaseLevel2.prototype.getTarget = function(options) {
    if (options.element !== "body") {
      return document.getElementById(options.element);
    }
    return document.body;
  };
  return BaseLevel2;
}();
var Success = new (function(_super) {
  __extends(Success2, _super);
  function Success2() {
    _super.apply(this, arguments);
  }
  Success2.prototype.fire = function(options, title, body) {
    if (body === void 0) {
      body = null;
    }
    var notification = this.buildNotification(options, "success", title, body);
    this.showNotification(notification, options);
  };
  return Success2;
}(BaseLevel))();
var Info = new (function(_super) {
  __extends(Info2, _super);
  function Info2() {
    _super.apply(this, arguments);
  }
  Info2.prototype.fire = function(options, title, body) {
    if (body === void 0) {
      body = null;
    }
    var notification = this.buildNotification(options, "info", title, body);
    this.showNotification(notification, options);
  };
  return Info2;
}(BaseLevel))();
var Warning = new (function(_super) {
  __extends(Warning2, _super);
  function Warning2() {
    _super.apply(this, arguments);
  }
  Warning2.prototype.fire = function(options, title, body) {
    if (body === void 0) {
      body = null;
    }
    var notification = this.buildNotification(options, "warning", title, body);
    this.showNotification(notification, options);
  };
  return Warning2;
}(BaseLevel))();
var Error = new (function(_super) {
  __extends(Error2, _super);
  function Error2() {
    _super.apply(this, arguments);
  }
  Error2.prototype.fire = function(options, title, body) {
    if (body === void 0) {
      body = null;
    }
    var notification = this.buildNotification(options, "error", title, body);
    this.showNotification(notification, options);
  };
  return Error2;
}(BaseLevel))();
var Default = new (function(_super) {
  __extends(Default2, _super);
  function Default2() {
    _super.apply(this, arguments);
  }
  Default2.prototype.fire = function(options, title, body) {
    if (body === void 0) {
      body = null;
    }
    var notification = this.buildNotification(options, "default", title, body);
    this.showNotification(notification, options);
  };
  return Default2;
}(BaseLevel))();
var Toastify = function() {
  function Toastify2() {
    this.levels = {
      success: Success,
      info: Info,
      warning: Warning,
      error: Error,
      default: Default
    };
    this.options = {
      position: "bottom-right",
      delay: 5e3,
      speed: 10,
      element: "body"
    };
  }
  Toastify2.prototype.setOption = function(key, value) {
    if (this.options.hasOwnProperty(key)) {
      this.options[key] = value;
      return;
    }
    throw "The option key " + key + " is not a valid option";
  };
  Toastify2.prototype.success = function(title, body) {
    if (body === void 0) {
      body = null;
    }
    this.levels.success.fire(this.options, title, body);
  };
  Toastify2.prototype.info = function(title, body) {
    if (body === void 0) {
      body = null;
    }
    this.levels.info.fire(this.options, title, body);
  };
  Toastify2.prototype.warning = function(title, body) {
    if (body === void 0) {
      body = null;
    }
    this.levels.warning.fire(this.options, title, body);
  };
  Toastify2.prototype.error = function(title, body) {
    if (body === void 0) {
      body = null;
    }
    this.levels.error.fire(this.options, title, body);
  };
  Toastify2.prototype.default = function(title, body) {
    if (body === void 0) {
      body = null;
    }
    return this.levels.default.fire(this.options, title, body);
  };
  return Toastify2;
}();
var index = new Toastify();
var build_default = index;
export {
  Toastify,
  build_default as default
};
//# sourceMappingURL=toastify.js.map
